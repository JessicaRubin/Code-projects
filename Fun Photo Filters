#User will use use 4 trackbars
#you have 3 sliders... your mission is to make more lol
#Engineer your world
#Jess Rubin
"""
This program will place filters onto pictures
"""
#Images_01_Starting_Code
#Engineer Your World
#Cv2 processes images
import cv2
#Numpy helps us assign data types to arrays
import numpy
#os.path locates where the original file is
import os.path

"""
This is where user inserts file name.
If the file name is valid then it will upload to Thonny.
If name is not valid it will ask user to try again.
"""
print ("Save your original image in the same folder as this program.")
#Using one equal sign because a variable is there
filename_valid = False
#this is not a variable. Now it is false. 
while filename_valid == False:
    filename = input("Enter the name of your file, including the "\
                                 "extension, and then press 'enter': ")
    if os.path.isfile(filename) == True:
        filename_valid = True
    else:
        print ("Something was wrong with that filename. Please try again.")

"""
Below is how the filters are added to the photos. These are variables are for the grayscale. Make another variable to make 3rd color hue
"""
#Original_image reads the image and keeps its color
original_image = cv2.imread(filename,1)
#grayscale_image_simple puts image on grayscale
grayscale_image_simple = cv2.imread(filename, 0)
#grayscale_image repeats 3 values and stores them 
grayscale_image = cv2.cvtColor(grayscale_image_simple, cv2.COLOR_GRAY2BGR)

"""
This will open up five seperate windows of different versions of the same photo.
"""
#these files name the windows
"""
Change this section to make the filters 
"""
cv2.namedWindow('Original Image',cv2.WINDOW_NORMAL)
cv2.namedWindow('Grayscale Image',cv2.WINDOW_NORMAL)
cv2.namedWindow('Red Parts of Image',cv2.WINDOW_NORMAL)
#you just added yellow...take out if you need
cv2.namedWindow('Blue Parts of Image',cv2.WINDOW_NORMAL)
cv2.namedWindow('Yellow Parts of Image',cv2.WINDOW_NORMAL)
cv2.namedWindow('Green Parts of Image',cv2.WINDOW_NORMAL)
cv2.namedWindow('Orange Parts of Image',cv2.WINDOW_NORMAL)
cv2.namedWindow('Purple Parts of Image',cv2.WINDOW_NORMAL)
#cv2.namedWindow('Orange Parts of Image')
cv2.namedWindow('Customized Image',cv2.WINDOW_NORMAL)
cv2.namedWindow('Trackbar',cv2.WINDOW_NORMAL)
cv2.namedWindow('Color_1_Trackbar',cv2.WINDOW_NORMAL)
cv2.namedWindow('Color_2_Trackbar',cv2.WINDOW_NORMAL)
cv2.namedWindow('Color_3_Trackbar',cv2.WINDOW_NORMAL)
cv2.namedWindow('Color_4_Trackbar',cv2.WINDOW_NORMAL)
cv2.namedWindow('Color_5_Trackbar',cv2.WINDOW_NORMAL)
cv2.namedWindow('Color_6_Trackbar',cv2.WINDOW_NORMAL)
cv2.imshow('Original Image', original_image)
cv2.imshow('Grayscale Image',grayscale_image)

#Resizes the specified window to the desired size. This is not recommended for videos; instead use cap.set(). Note that sometimes this function requires the window to have been created with the cv2.WINDOW_NORMAL tag, for example, namedWindow(‘window_name’, cv2.WINDOW_NORMAL). 
#window_name   is the window that you want to resize.
#width   is the desired new width in pixels.
#height   is the desired new height in pixels.

cv2.resizeWindow("Color_1_Trackbar", 500, 400)
cv2.resizeWindow("Original Image", 500, 400)
cv2.resizeWindow("Customized Image", 500, 400)
cv2.resizeWindow("Grayscale Image", 500, 400)

"""
This is where image is made. You can change height , width, and shape of image.
"""

image_height = original_image.shape[0]
image_width = original_image.shape[1]
#channels are the colors. There are two colors. That is why is in brackets.
image_channels = original_image.shape[2]
"""
Below is a code of how the filters are made.
These are two color combinations.
This will project images.
"""
#this defines paper colors
color1_paper = numpy.zeros((image_height,image_width,image_channels), numpy.uint8)
color2_paper = numpy.zeros((image_height,image_width,image_channels),numpy.uint8)
color3_paper = numpy.zeros((image_height,image_width,image_channels), numpy.uint8)
color4_paper = numpy.zeros((image_height,image_width,image_channels), numpy.uint8)
color5_paper = numpy.zeros((image_height,image_width,image_channels), numpy.uint8)
color6_paper = numpy.zeros((image_height,image_width,image_channels), numpy.uint8)


#red_paper[0:image_height,0:image_width, 0:image_channels] = [0,0,255]
#yellow_paper[0:image_height,0:image_width, 0:image_channels] = [0,255,255]
#green_paper[0:image_height,0:image_width, 0:image_channels] = [0,255,0]
#orange_paper[0:image_height,0:image_width, 0:image_channels] = [0,165,255]

"""
Below are the trackbars.
This is creating the side bar.
127 is the minimum and 255 is the max.
They seperate the lights from the darks. 
"""

cv2.createTrackbar('grayscale_position1', 'Trackbar', 25,255,lambda x:None)
cv2.createTrackbar('grayscale_position2', 'Trackbar', 50,255,lambda x:None)
cv2.createTrackbar('grayscale_position3', 'Trackbar', 75,255,lambda x:None)
cv2.createTrackbar('grayscale_position4', 'Trackbar', 100,255,lambda x:None)
cv2.createTrackbar('grayscale_position5', 'Trackbar', 150,255,lambda x:None)



#Creating different shades of the color blue
cv2.createTrackbar('blue1', 'Color_1_Trackbar', 15,255,lambda x:None)
cv2.createTrackbar('blue2', 'Color_2_Trackbar', 101,255,lambda x:None)
cv2.createTrackbar('blue3', 'Color_3_Trackbar', 197,255,lambda x:None)
cv2.createTrackbar('blue4', 'Color_4_Trackbar', 124,255,lambda x:None)
cv2.createTrackbar('blue5', 'Color_5_Trackbar', 72,255,lambda x:None)
cv2.createTrackbar('blue6', 'Color_6_Trackbar', 80,255,lambda x:None)

#creating different shades of the color green
cv2.createTrackbar('green1', 'Color_1_Trackbar', 74,255,lambda x:None)
cv2.createTrackbar('green2', 'Color_2_Trackbar', 99,255,lambda x:None)
cv2.createTrackbar('green3', 'Color_3_Trackbar', 200,255,lambda x:None)
cv2.createTrackbar('green4', 'Color_4_Trackbar', 50,255,lambda x:None)
cv2.createTrackbar('green5', 'Color_5_Trackbar', 100,255,lambda x:None)
cv2.createTrackbar('green6', 'Color_6_Trackbar', 0,255,lambda x:None)

#creating diffrent shades of the color red
cv2.createTrackbar('red1', 'Color_1_Trackbar', 172,255,lambda x:None)
cv2.createTrackbar('red2', 'Color_2_Trackbar', 166,255,lambda x:None)
cv2.createTrackbar('red3', 'Color_3_Trackbar', 150,255,lambda x:None)
cv2.createTrackbar('red4', 'Color_4_Trackbar', 48,255,lambda x:None)
cv2.createTrackbar('red5', 'Color_5_Trackbar', 157,255,lambda x:None)
cv2.createTrackbar('red6', 'Color_6_Trackbar', 44,255,lambda x:None)

keypressed = 1

while (keypressed !=27 and keypressed != ord('s')):
    grayscale_break = cv2.getTrackbarPos('grayscale_position1', 'Trackbar')
    grayscale_break2 = cv2.getTrackbarPos('grayscale_position2', 'Trackbar')
    grayscale_break3 = cv2.getTrackbarPos('grayscale_position3', 'Trackbar')
    grayscale_break4 = cv2.getTrackbarPos('grayscale_position4', 'Trackbar')
    grayscale_break5 = cv2.getTrackbarPos('grayscale_position5', 'Trackbar')
    grayscale_break6 = cv2.getTrackbarPos('grayscale_position6', 'Trackbar')
    
    #blue 
    blue1 = cv2.getTrackbarPos('blue1', 'Color_1_Trackbar ')
    blue2 = cv2.getTrackbarPos('blue2', 'Color_2_Trackbar ')
    blue3 = cv2.getTrackbarPos('blue3', 'Color_3_Trackbar ')
    blue4 = cv2.getTrackbarPos('blue4', 'Color_4_Trackbar ')
    blue5 = cv2.getTrackbarPos('blue5', 'Color_5_Trackbar ')
    blue6 = cv2.getTrackbarPos('blue6', 'Color_6_Trackbar ')
    
    #green
    green1 = cv2.getTrackbarPos('green1', 'Color_1_Trackbar')
    green2 = cv2.getTrackbarPos('green2', 'Color_2_Trackbar')
    green3 = cv2.getTrackbarPos('green3', 'Color_3_Trackbar')
    green4 = cv2.getTrackbarPos('green4', 'Color_4_Trackbar')
    green5 = cv2.getTrackbarPos('green5', 'Color_5_Trackbar')
    green6 = cv2.getTrackbarPos('green6', 'Color_6_Trackbar')
    
    #red
    red1 = cv2.getTrackbarPos('red1', 'Color_1_Trackbar')
    red2 = cv2.getTrackbarPos('red2', 'Color_2_Trackbar')
    red3 = cv2.getTrackbarPos('red3', 'Color_3_Trackbar')
    red4 = cv2.getTrackbarPos('red4', 'Color_4_Trackbar')
    red5 = cv2.getTrackbarPos('red5', 'Color_5_Trackbar')
    red6 = cv2.getTrackbarPos('red6', 'Color_6_Trackbar')
   
       #setting color ??do i add other colors here??
    color1_paper[0:image_height,0:image_width, 0:image_channels] = [blue1,green1,red1]
    color2_paper[0:image_height,0:image_width, 0:image_channels] = [blue2,green2,red2]
    color3_paper[0:image_height,0:image_width, 0:image_channels] = [blue3,green3,red3]
    color4_paper[0:image_height,0:image_width, 0:image_channels] = [blue4,green4,red4]
    color5_paper[0:image_height,0:image_width, 0:image_channels] = [blue5,green5,red5]
    color6_paper[0:image_height,0:image_width, 0:image_channels] = [blue6,green6,red6]
    """
    The variables below are a continuation of the gray scale. All equal numbers mean its color will be in the grayscale
    """
    #color 1
    min_color1 = [0,0,0]
    max_color1 = [grayscale_break,grayscale_break,grayscale_break]

    #color 2
    min_color2 = [grayscale_break+1,grayscale_break+1,grayscale_break+1]
    max_color2 = [grayscale_break2,grayscale_break2,grayscale_break2]
    
    #color 3
    min_color3 = [grayscale_break2+1,grayscale_break2+1,grayscale_break2+1]
    max_color3 = [grayscale_break3,grayscale_break3,grayscale_break3]
    
    #color 4
    min_color4 = [grayscale_break3+1,grayscale_break3+1,grayscale_break3+1]
    max_color4 = [grayscale_break4,grayscale_break4,grayscale_break4]
    
    #color 5
    min_color5 = [grayscale_break4+1,grayscale_break4+1,grayscale_break4+1]
    max_color5 = [grayscale_break5,grayscale_break5,grayscale_break5]
    
    #color 6
    min_color6 = [grayscale_break5+1,grayscale_break5+1,grayscale_break5+1]
    max_color6 = [255,255,255]
    
    """
    This will make sure the data is correct
    """
    min_color1 = numpy.array(min_color1, dtype = "uint8")
    max_color1 = numpy.array(max_color1, dtype = "uint8")
    
    min_color2= numpy.array(min_color2, dtype = "uint8")
    max_color2= numpy.array(max_color2, dtype = "uint8")
    
    min_color3= numpy.array(min_color3, dtype = "uint8")
    max_color3= numpy.array(max_color3, dtype = "uint8")
    
    min_color4= numpy.array(min_color4, dtype = "uint8")
    max_color4= numpy.array(max_color4, dtype = "uint8")
    
    min_color5= numpy.array(min_color5, dtype = "uint8")
    max_color5= numpy.array(max_color5, dtype = "uint8")
    
    min_color6= numpy.array(min_color6, dtype = "uint8")
    max_color6= numpy.array(max_color6, dtype = "uint8")
    
    #Seperates colors that are not as important
    isolate_color1 = cv2.inRange(grayscale_image,min_color1,max_color1)
    isolate_color2 = cv2.inRange(grayscale_image,min_color2,max_color2)
    isolate_color3 = cv2.inRange(grayscale_image,min_color3,max_color3)
    isolate_color4 = cv2.inRange(grayscale_image,min_color4,max_color4)
    isolate_color5 = cv2.inRange(grayscale_image,min_color5,max_color5)
    isolate_color6 = cv2.inRange(grayscale_image,min_color6,max_color6)
    
    #This creates colored paper stencil
    part1 = cv2.bitwise_or(color1_paper,color1_paper,mask = isolate_color1)
    part2 = cv2.bitwise_or(color2_paper,color2_paper,mask = isolate_color2)
    part3 = cv2.bitwise_or(color3_paper,color3_paper,mask = isolate_color3)
    part4 = cv2.bitwise_or(color4_paper,color4_paper,mask = isolate_color4)
    part5 = cv2.bitwise_or(color5_paper,color5_paper,mask = isolate_color5)
    part6 = cv2.bitwise_or(color6_paper,color6_paper,mask = isolate_color6)
    
    #Combining all color stencils together
    merged_colors1 = cv2.bitwise_or(part1, part2)
    merged_colors2 = cv2.bitwise_or(part3, part4)
    merged_colors3 = cv2.bitwise_or(part5, part6)

    merged_colors4 = cv2.bitwise_or(merged_colors1, merged_colors2)
    merged_colors5 = cv2.bitwise_or(merged_colors3, merged_colors4)
    customized_image = cv2.bitwise_or(merged_colors4, merged_colors5)
    
    
    #Displays windows with correct image
    cv2.imshow('Red Parts of Image',part1)
    cv2.imshow('Blue Parts of Image',part2)
    cv2.imshow('Yellow Parts of Image',part3)
    cv2.imshow('Green Parts of Image', part4)
    cv2.imshow('Orange Parts of Image', part5)
    cv2.imshow('Purple Parts of Image', part6)
    cv2.imshow('Customized Image',customized_image)
    
    """
    Customized image is the final output. Now several images with different filters should appear.
    When user presses Esc key it gets rid of windows. When User presses S key the images will be saved
    """
    #without key press it will be stuck in a loop and will give blank screen 
    keypressed = cv2.waitKey(1)
if keypressed == 27:
    cv2.destroyAllWindows()
else:
    cv2.imwrite('photo_GS_1.jpg',grayscale_image)
    cv2.imwrite('photo_RY_1.jpg',customized_image)
    cv2.destroyAllWindows()
